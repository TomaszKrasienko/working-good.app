// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using wg.modules.owner.infrastructure.DAL;

#nullable disable

namespace wg.modules.owner.infrastructure.DAL.Migrations
{
    [DbContext(typeof(OwnerDbContext))]
    partial class OwnerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("owner")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GroupMembership", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("GroupMembership", "owner");
                });

            modelBuilder.Entity("wg.modules.owner.domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups", "owner");
                });

            modelBuilder.Entity("wg.modules.owner.domain.Entities.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Owner", "owner");
                });

            modelBuilder.Entity("wg.modules.owner.domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("Users", "owner");
                });

            modelBuilder.Entity("GroupMembership", b =>
                {
                    b.HasOne("wg.modules.owner.domain.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wg.modules.owner.domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wg.modules.owner.domain.Entities.Group", b =>
                {
                    b.HasOne("wg.modules.owner.domain.Entities.Owner", null)
                        .WithMany("Groups")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("wg.modules.owner.domain.Entities.User", b =>
                {
                    b.HasOne("wg.modules.owner.domain.Entities.Owner", null)
                        .WithMany("Users")
                        .HasForeignKey("OwnerId");

                    b.OwnsOne("wg.modules.owner.domain.ValueObjects.User.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(40)
                                .HasColumnType("nvarchar(40)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("nvarchar(60)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "owner");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("wg.modules.owner.domain.ValueObjects.User.ResetPasswordToken", "ResetPasswordToken", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("Expiry")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "owner");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("wg.modules.owner.domain.ValueObjects.User.VerificationToken", "VerificationToken", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<DateTimeOffset?>("VerificationDate")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "owner");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("FullName");

                    b.Navigation("ResetPasswordToken");

                    b.Navigation("VerificationToken");
                });

            modelBuilder.Entity("wg.modules.owner.domain.Entities.Owner", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
